<?xml version="1.0" encoding="utf-8"?>
<template>
    <name>service</name>
    <filePath>src/main/java/${packageName}/${moduleName}/${subModuleName}</filePath>
    <fileName>${ClassName}Service.java</fileName>
    <content><![CDATA[
/**
 * Copyright &copy; 2012-2016 <a href="https://github.com/thinkgem/jeesite">JeeSite</a> All rights reserved.
 */
package ${packageName}.${moduleName}<#if subModuleName != "">.${subModuleName}</#if>;

import java.util.List;
import com.lemuji.commons.pojo.UserBean;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import ${packageName}.entity<#if subModuleName != "">.${subModuleName}</#if>.${ClassName};
import ${packageName}.${moduleName}<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Mapper;
import org.springframework.beans.factory.annotation.Autowired;
import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import com.lemuji.commons.pojo.PageDto;
import org.springframework.util.Assert;
/**
 * @author ${functionAuthor}
 * @date ${functionVersion}
 * @remark ${functionName}Service
 */
@Service
public class ${ClassName}Service  {

    @Autowired
    ${ClassName}Mapper ${className}Mapper;

	/**
	 * @author ${functionAuthor}
	 * @date ${functionVersion}
	 * @remark ${functionName}根据id查询
	 */
	public ${ClassName} read(UserBean userBean,String id) {
		 return ${className}Mapper.read(userBean.getBid(),id);
	}

	/**
	 * @author ${functionAuthor}
	 * @date ${functionVersion}
	 * @remark ${functionName}分页查询
	 */
	public Page list(UserBean userBean,PageDto pageDto,${ClassName} ${className}) {
        Page<${ClassName}> pages = PageHelper.startPage(pageDto).doSelectPage(
                () -> {
                    ${className}.setBid(userBean.getBid());
                    ${className}Mapper.list(${className});
                }
        );

        return pages;
    }

	/**
	 * @author ${functionAuthor}
	 * @date ${functionVersion}
	 * @remark ${functionName}新增
	 */
	@Transactional
	public void create(UserBean userBean,${ClassName} ${className}) {
	    ${className}.setBid(userBean.getBid());
		${className}Mapper.create(${className});
	}

	/**
	 * @author ${functionAuthor}
	 * @date ${functionVersion}
	 * @remark ${functionName}修改
	 */
	@Transactional
	public void update(UserBean userBean,${ClassName} ${className}) {
        ${ClassName} obj=${className}Mapper.read(userBean.getBid(),${className}.getId());
        Assert.notNull(obj, "修改对象为空");

	    ${className}Mapper.update(${className});
	}
	/**
	 * @author ${functionAuthor}
	 * @date ${functionVersion}
	 * @remark ${functionName}删除
	 */
	@Transactional
	public void delete(UserBean userBean,String id) {
        ${ClassName} obj=${className}Mapper.read(userBean.getBid(),id);
        Assert.notNull(obj, "删除对象为空");
	    ${className}Mapper.delete(id);
	}

	/**
	 * @author ${functionAuthor}
	 * @date ${functionVersion}
	 * @remark ${functionName}批量新增
	 */
    @Transactional
	public void batchCreate(UserBean userBean,List<${ClassName}> ${className}s) {
	    //手动添加userId bid
		${className}Mapper.batchCreate(${className}s);
	}

	/**
	 * @author ${functionAuthor}
	 * @date ${functionVersion}
	 * @remark ${functionName}批量修改
	 */
    @Transactional
	public void batchUpdate(UserBean userBean,List<${ClassName}> ${className}s) {
	    //手动验证数据是否存在
		${className}Mapper.batchUpdate(${className}s);
	}

	@Transactional
	public void batchDelete(UserBean userBean,String[] ids) {
	    //手动验证数据是否存在
		${className}Mapper.batchDelete(ids);
	}
	
}]]>
    </content>
</template>